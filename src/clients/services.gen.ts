// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetPetByIdData, GetPetByIdError, GetPetByIdResponse, UpdatePetWithFormData, DeletePetData, UploadFileData, UploadFileError, UploadFileResponse, AddPetData, UpdatePetData, FindPetsByStatusData, FindPetsByStatusError, FindPetsByStatusResponse, FindPetsByTagsData, FindPetsByTagsError, FindPetsByTagsResponse, GetInventoryError, GetInventoryResponse, GetOrderByIdData, GetOrderByIdError, GetOrderByIdResponse, DeleteOrderData, PlaceOrderData, PlaceOrderError, PlaceOrderResponse, GetUserByNameData, GetUserByNameError, GetUserByNameResponse, UpdateUserData, DeleteUserData, CreateUserData, CreateUserError, CreateUserResponse, CreateUsersWithArrayInputData, CreateUsersWithArrayInputError, CreateUsersWithArrayInputResponse, CreateUsersWithListInputData, CreateUsersWithListInputError, CreateUsersWithListInputResponse, LoginUserData, LoginUserError, LoginUserResponse, LogoutUserError, LogoutUserResponse } from './types.gen';

export const client = createClient(createConfig());

export class PetService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Find pet by ID
     * Returns a single pet
     */
    public getPetById<ThrowOnError extends boolean = false>(options: Options<GetPetByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPetByIdResponse, GetPetByIdError, ThrowOnError>({
            ...options,
            url: '/pet/{petId}'
        });
    }
    
    /**
     * Updates a pet in the store with form data
     */
    public updatePetWithForm<ThrowOnError extends boolean = false>(options: Options<UpdatePetWithFormData, ThrowOnError>) {
        return (options?.client ?? client).post<void, unknown, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/pet/{petId}'
        });
    }
    
    /**
     * Deletes a pet
     */
    public deletePet<ThrowOnError extends boolean = false>(options: Options<DeletePetData, ThrowOnError>) {
        return (options?.client ?? client).delete<void, unknown, ThrowOnError>({
            ...options,
            url: '/pet/{petId}'
        });
    }
    
    /**
     * uploads an image
     */
    public uploadFile<ThrowOnError extends boolean = false>(options: Options<UploadFileData, ThrowOnError>) {
        return (options?.client ?? client).post<UploadFileResponse, UploadFileError, ThrowOnError>({
            ...options,
            ...formDataBodySerializer,
            headers: {
                'Content-Type': null,
                ...options?.headers
            },
            url: '/pet/{petId}/uploadImage'
        });
    }
    
    /**
     * Add a new pet to the store
     */
    public addPet<ThrowOnError extends boolean = false>(options: Options<AddPetData, ThrowOnError>) {
        return (options?.client ?? client).post<void, unknown, ThrowOnError>({
            ...options,
            url: '/pet'
        });
    }
    
    /**
     * Update an existing pet
     */
    public updatePet<ThrowOnError extends boolean = false>(options: Options<UpdatePetData, ThrowOnError>) {
        return (options?.client ?? client).put<void, unknown, ThrowOnError>({
            ...options,
            url: '/pet'
        });
    }
    
    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     */
    public findPetsByStatus<ThrowOnError extends boolean = false>(options: Options<FindPetsByStatusData, ThrowOnError>) {
        return (options?.client ?? client).get<FindPetsByStatusResponse, FindPetsByStatusError, ThrowOnError>({
            ...options,
            url: '/pet/findByStatus'
        });
    }
    
    /**
     * @deprecated
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     */
    public findPetsByTags<ThrowOnError extends boolean = false>(options: Options<FindPetsByTagsData, ThrowOnError>) {
        return (options?.client ?? client).get<FindPetsByTagsResponse, FindPetsByTagsError, ThrowOnError>({
            ...options,
            url: '/pet/findByTags'
        });
    }
    
}

export class StoreService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     */
    public getInventory<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetInventoryResponse, GetInventoryError, ThrowOnError>({
            ...options,
            url: '/store/inventory'
        });
    }
    
    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
     */
    public getOrderById<ThrowOnError extends boolean = false>(options: Options<GetOrderByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOrderByIdResponse, GetOrderByIdError, ThrowOnError>({
            ...options,
            url: '/store/order/{orderId}'
        });
    }
    
    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     */
    public deleteOrder<ThrowOnError extends boolean = false>(options: Options<DeleteOrderData, ThrowOnError>) {
        return (options?.client ?? client).delete<void, unknown, ThrowOnError>({
            ...options,
            url: '/store/order/{orderId}'
        });
    }
    
    /**
     * Place an order for a pet
     */
    public placeOrder<ThrowOnError extends boolean = false>(options: Options<PlaceOrderData, ThrowOnError>) {
        return (options?.client ?? client).post<PlaceOrderResponse, PlaceOrderError, ThrowOnError>({
            ...options,
            url: '/store/order'
        });
    }
    
}

export class UserService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get user by user name
     */
    public getUserByName<ThrowOnError extends boolean = false>(options: Options<GetUserByNameData, ThrowOnError>) {
        return (options?.client ?? client).get<GetUserByNameResponse, GetUserByNameError, ThrowOnError>({
            ...options,
            url: '/user/{username}'
        });
    }
    
    /**
     * Updated user
     * This can only be done by the logged in user.
     */
    public updateUser<ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) {
        return (options?.client ?? client).put<void, unknown, ThrowOnError>({
            ...options,
            url: '/user/{username}'
        });
    }
    
    /**
     * Delete user
     * This can only be done by the logged in user.
     */
    public deleteUser<ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) {
        return (options?.client ?? client).delete<void, unknown, ThrowOnError>({
            ...options,
            url: '/user/{username}'
        });
    }
    
    /**
     * Create user
     * This can only be done by the logged in user.
     */
    public createUser<ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
            ...options,
            url: '/user'
        });
    }
    
    /**
     * Creates list of users with given input array
     */
    public createUsersWithArrayInput<ThrowOnError extends boolean = false>(options: Options<CreateUsersWithArrayInputData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateUsersWithArrayInputResponse, CreateUsersWithArrayInputError, ThrowOnError>({
            ...options,
            url: '/user/createWithArray'
        });
    }
    
    /**
     * Creates list of users with given input array
     */
    public createUsersWithListInput<ThrowOnError extends boolean = false>(options: Options<CreateUsersWithListInputData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateUsersWithListInputResponse, CreateUsersWithListInputError, ThrowOnError>({
            ...options,
            url: '/user/createWithList'
        });
    }
    
    /**
     * Logs user into the system
     */
    public loginUser<ThrowOnError extends boolean = false>(options: Options<LoginUserData, ThrowOnError>) {
        return (options?.client ?? client).get<LoginUserResponse, LoginUserError, ThrowOnError>({
            ...options,
            url: '/user/login'
        });
    }
    
    /**
     * Logs out current logged in user session
     */
    public logoutUser<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<LogoutUserResponse, LogoutUserError, ThrowOnError>({
            ...options,
            url: '/user/logout'
        });
    }
    
}